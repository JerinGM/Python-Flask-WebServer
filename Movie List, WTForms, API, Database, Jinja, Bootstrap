#############################################   main

from flask import Flask, render_template, redirect, url_for, request
from flask_bootstrap import Bootstrap5
from flask_sqlalchemy import SQLAlchemy
from flask_wtf import FlaskForm
from wtforms import StringField, SubmitField
from wtforms.validators import DataRequired
import requests


app = Flask(__name__)
app.config['SECRET_KEY'] = '8BYkEfBA6O6donzWlSihBXox7C0sKR6b'
Bootstrap5(app)

app.config['SQLALCHEMY_DATABASE_URI'] = "sqlite:///books.db"
# Create the extension
db = SQLAlchemy()
# initialise the app with the extension
db.init_app(app)


# CREATE TABLE
class Movie(db.Model):
    id = db.Column(db.Integer, primary_key=True)
    title = db.Column(db.String(250), unique=True, nullable=False)
    year = db.Column(db.Integer, nullable=False)
    description = db.Column(db.String(500), nullable=False)
    rating = db.Column(db.Float, nullable=True)
    ranking = db.Column(db.Integer, nullable=True)
    review = db.Column(db.String(250), nullable=True)
    img_url = db.Column(db.String(250), nullable=False)


# Create table schema in the database. Requires application context.
with app.app_context():
    db.create_all()


# Commenting the below code after adding it to the DB
# new_movie = Movie(
#     title="Phone Booth",
#     year=2002,
#     description="Publicist Stuart Shepard finds himself trapped in a phone booth, "
#                 "pinned down by an extortionist's sniper rifle. Unable to leave or "
#                 "receive outside help, Stuart's negotiation with the caller leads to "
#                 "a jaw-dropping climax.",
#     rating=7.3,
#     ranking=10,
#     review="My favourite character was the caller.",
#     img_url="https://image.tmdb.org/t/p/w500/tjrX2oWRCM3Tvarz38zlZM7Uc10.jpg"
# )
# with app.app_context():
#     db.session.add(new_movie)
#     db.session.commit()


# Commenting second movie entry as well - both movies are present in the DB
# second_movie = Movie(
#     title="Avatar The Way of Water",
#     year=2022,
#     description="Set more than a decade after the events of the first film, "
#                 "learn the story of the Sully family (Jake, Neytiri, and their kids), "
#                 "the trouble that follows them, the lengths they go to keep each other safe, "
#                 "the battles they fight to stay alive, and the tragedies they endure.",
#     rating=7.3,
#     ranking=9,
#     review="I liked the water.",
#     img_url="https://image.tmdb.org/t/p/w500/t6HIqrRAclMCA60NsSmeqe9RmNV.jpg"
# )
# with app.app_context():
#     db.session.add(second_movie)
#     db.session.commit()


class RateMovieForm(FlaskForm):
    rating = StringField("Your Rating Out of 10 e.g. 7.5")
    review = StringField("Your Review")
    submit = SubmitField("Done")


@app.route("/edit", methods=["GET", "POST"])
def edit_movie():
    edit_form = RateMovieForm()
    movie_id = request.args.get("id")
    movie_to_update = db.session.execute(db.select(Movie).where(Movie.id == movie_id)).scalar()
    if edit_form.validate_on_submit():

        movie_to_update.rating = float(edit_form.rating.data)
        movie_to_update.review = edit_form.review.data
        db.session.commit()
        return redirect(url_for('home'))
    return render_template("edit.html", movie=movie_to_update, form=edit_form)

@app.route("/delete", methods=["GET", "POST"])
def delete_movie():
    movie_id = request.args.get("id")
    movie_to_delete = db.session.execute(db.select(Movie).where(Movie.id == movie_id)).scalar()
    # or book_to_delete = db.get_or_404(Book, book_id)
    db.session.delete(movie_to_delete)
    db.session.commit()
    return redirect(url_for('home'))


@app.route("/")
def home():
    # result = db.session.execute(db.select(Movie))
    # all_movies = result.scalars()
    # return render_template("index.html", movies=all_movies)

    result = db.session.execute(db.select(Movie).order_by(Movie.rating))
    all_movies = result.scalars().all() # convert ScalarResult to Python List

    for i in range(len(all_movies)):
        all_movies[i].ranking = len(all_movies) - i
    db.session.commit()

    return render_template("index.html", movies=all_movies)









class AddMovieForm(FlaskForm):
    title = StringField("Movie Title")
    submit = SubmitField("Add Movie")


@app.route("/add", methods=["GET", "POST"])
def add_movie():
    form = AddMovieForm()
    API= "1121de6dcdc30fd70ea1f1715d326735"
    if form.validate_on_submit():
        movie_title = form.title.data
        response = requests.get("https://api.themoviedb.org/3/search/movie", params={"api_key": API, "query": movie_title})
        data = response.json()["results"]
        return render_template("select.html", options=data)
    return render_template("add.html", form=form)


@app.route("/find")
def find_movie():
    API = "1121de6dcdc30fd70ea1f1715d326735"
    movie_api_id = request.args.get("id")
    if movie_api_id:
        movie_api_url = f"{'https://api.themoviedb.org/3/movie/'}{movie_api_id}"
        response = requests.get(movie_api_url, params={"api_key": API, "language": "en-US"})
        data = response.json()
        new_movie = Movie(
            title=data["title"],
            # The data in release_date includes month and day, we will want to get rid of.
            year=data["release_date"].split("-")[0],
            img_url=f"{'https://image.tmdb.org/t/p/w500'}{data['poster_path']}",
            description=data["overview"]
        )
        db.session.add(new_movie)
        db.session.commit()
        return redirect(url_for("home"))

if __name__ == '__main__':
    app.run(debug=True)

####################################################   Index

{% extends 'base.html' %}

{% block title %}My Top 10 Movies{% endblock %}

{% block content %}
<div class="container">
  <h1 class="heading">My Top 10 Movies</h1>
  <p class="description">These are my all-time favourite movies.</p>

  {% for movie in movies: %}
  <div class="card" >
    <div class="front" style="background-image: url('{{ movie.img_url }}');">
        <p class="large">{{ movie.id }}</p>
    </div>
    <div class="back">
      <div>
    <div class="title">{{ movie.title }} <span class="release_date">({{movie.year}})</span></div>
        <div class="rating">
            <label>{{ movie.rating }}</label>
          <i class="fas fa-star star"></i>
        </div>
    <p class="review">"{{movie.review}}"</p>
        <p class="overview">{{movie.description}}</p>


        <a href="{{ url_for('edit_movie', id=movie.id) }}" class="button">Update</a>
        <a href="{{ url_for('delete_movie', id=movie.id) }}" class="button delete-button">Delete</a>

      </div>
    </div>
  </div>
    {% endfor %}
</div>
<div class="container text-center add">
<a href="{{ url_for('add_movie') }}" class="button">Add Movie</a>
</div>

{% endblock %}


######################################################## base

<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="UTF-8" />
    <meta
      name="viewport"
      content="width=device-width, initial-scale=1, shrink-to-fit=no"
    />

    {% block styles %}
    <!-- Load Bootstrap-Flask CSS here -->
    {{ bootstrap.load_css() }}
    <!-- Link to the styles.css here to apply styling to all the child templates.-->
    <link
      rel="stylesheet"
      href="https://fonts.googleapis.com/css?family=Nunito+Sans:300,400,700"
    />
    <link
      rel="stylesheet"
      href="https://fonts.googleapis.com/css?family=Poppins:300,400,700"
    />
    <link
      rel="stylesheet"
      href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/5.14.0/css/all.min.css"
      integrity="sha512-1PKOgIY59xJ8Co8+NE6FZ+LOAZKjy+KY8iq0G4B3CyeY6wYHN3yt9PW0XpSriVlkMXe40PTKnXrLnZ9+fkDaog=="
      crossorigin="anonymous"
    />
    <link
      rel="stylesheet"
      href="{{ url_for('static', filename='css/styles.css') }}"
    />
    {% endblock %}

    <title>{% block title %}{% endblock %}</title>
  </head>
  <body>
    {% block content %}{% endblock %}
  </body>
</html>



######################################################################### add
{% extends 'base.html' %}
{% from 'bootstrap5/form.html' import render_form %}
{% block title %}Add Movie{% endblock %}

{% block content %}
<div class="content">
    <h1 class="heading">Add a Movie</h1>
            {{ render_form(form, novalidate=True) }}

</div>
{% endblock %}

####################################################################### edit
{% extends 'base.html' %}
{% from 'bootstrap5/form.html' import render_form %}

{% block title %}Edit Movies{% endblock %}

{% block content %}
<div class="content">
  <h1 class="heading">{{movie.title}}</h1>
    <p class="description">Edit Movie Rating</p>
        {{ render_form(form, novalidate=True) }}
  </div>
{% endblock %}

#######################################################################select
{% extends 'base.html' %}

{% block title %}Select Movie{% endblock %}

{% block content %}
<div class="container">
    <h1 class="heading">Select Movie</h1>
    {% for movie in options: %}
  <p>
    <a href="{{ url_for('find_movie', id=movie.id) }}">{{ movie.title }} - {{ movie.release_date }}</a>
  </p>
  {% endfor %}

</div>
{% endblock %}
